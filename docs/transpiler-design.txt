
1. Clean and normalize text
- lower case names and instructions
- remove comments
- remove extra whitespace (including newlines)

Input:
var X//This is a comment
var L [ 5 ] I
read X--This is also a comment
msg "Bye" X#No doubt it is a comment
rem &&Some comment~!@#$":<
wneq I 5
	lset L i 1
	inc i 1
	ifeq i 3
	    set x 1
	    call foo x i
	end
end
proc Foo a b
    set b a
    call Bar
end
proc Bar
    msg "hey"
end

Output:
var x var l[5] i read x msg "Bye" x wneq i 5 lset l i 1 inc i 1 ifeq i 3 set x 1 call foo x i end end proc foo a b set b a call bar end proc bar msg "hey" end


2. Create symbol table and procedure table

Input:
var x var l[5] i read x msg "Bye" x wneq i 5 lset l i 1 inc i 1 ifeq i 3 set x 1 call foo x i end end proc foo a b set b a call bar end proc bar msg "hey" end

Output:
Symbol Table (first 10 indices for temp vars)
============
x   10
l   11
i   16

Procedure Table
===============
foo a b     set b a call bar
bar         msg "hey"

Code
====
read x msg "Bye" x wneq i 5 lset l i 1 inc i 1 ifeq i 3 set x 1 call foo x i end end


3. Create Abstract Syntax Tree
- Build AST
- Replace procedure calls with inline code

Input: Code, Procedure Table

Output:
            AST
            |
+-----------+---------------+
read x      msg "Bye" x     wneq i 5
                            |
            +---------------+-----------+
            lset l i 1      inc i 1     ifeq i 3
                                        |
                            +-----------+
                            set x 1     call foo x i
                                        |
                            +-----------+
                            set i x     call bar
                                        |
                                        +
                                        msg "hey"


4. Generate intermediate code
- parse tree from bottom up, left to right
- produce brainfuck that still refers to vars by name and assigns absolute values to them

Input: AST

Output:
x , t0 ='B' . ='y' . ='e' . =x . i -5 [ +5 l[i] =1 i +1 t0 =0 i -3 [ t0 -1 i +3 t1 =0 ] t0 +1 [ i +3 x =1 i =x t0 ='h' . ='e' . ='y' . t0 =0 ] i -5 ] +5

5. Replace var names and assignments with true brainfuck operators
- Track datatape pointer location and datatape state (values)

Input: Symbol table, datatape_ptr, datatape
x , t0 ='B' . ='y' . ='e' . =x . i -5 [ +5 l[i] =1 i +1 t0 =0 i -3 [ t0 -1 i +3 t1 =0 ] t0 +1 [ i +3 x =1 i =x t0 ='h' . ='e' . ='y' . t0 =0 ] i -5 ] +5

Output:
>(10),<+(66).+(55).-(20).   ....

